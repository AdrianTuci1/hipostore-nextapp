"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    ElementButton: function() {
        return _Button.default;
    },
    LeafButton: function() {
        return _Button1.default;
    },
    nodeIsTextNode: function() {
        return _types.nodeIsTextNode;
    },
    slateEditor: function() {
        return slateEditor;
    },
    toggleElement: function() {
        return _toggle.default;
    }
});
const _utilities = require("payload/utilities");
const _cell = /*#__PURE__*/ _interop_require_default(require("./cell"));
const _richTextRelationshipPromise = require("./data/richTextRelationshipPromise");
const _validation = require("./data/validation");
const _field = /*#__PURE__*/ _interop_require_default(require("./field"));
const _Button = /*#__PURE__*/ _interop_require_default(require("./field/elements/Button"));
const _toggle = /*#__PURE__*/ _interop_require_default(require("./field/elements/toggle"));
const _Button1 = /*#__PURE__*/ _interop_require_default(require("./field/leaves/Button"));
const _types = require("./types");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function slateEditor(args) {
    return {
        CellComponent: (0, _utilities.withMergedProps)({
            Component: _cell.default,
            toMergeIntoProps: args
        }),
        FieldComponent: (0, _utilities.withMergedProps)({
            Component: _field.default,
            toMergeIntoProps: args
        }),
        outputSchema: ({ isRequired })=>{
            return {
                items: {
                    type: 'object'
                },
                type: (0, _utilities.withNullableJSONSchemaType)('array', isRequired)
            };
        },
        populationPromise ({ context, currentDepth, depth, field, findMany, flattenLocales, overrideAccess, populationPromises, req, showHiddenFields, siblingDoc }) {
            if (field.admin?.elements?.includes('relationship') || field.admin?.elements?.includes('upload') || field.admin?.elements?.includes('link') || !field?.admin?.elements) {
                return (0, _richTextRelationshipPromise.richTextRelationshipPromise)({
                    context,
                    currentDepth,
                    depth,
                    field,
                    findMany,
                    flattenLocales,
                    overrideAccess,
                    populationPromises,
                    req,
                    showHiddenFields,
                    siblingDoc
                });
            }
            return null;
        },
        validate: _validation.richTextValidate
    };
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFJpY2hUZXh0QWRhcHRlciB9IGZyb20gJ3BheWxvYWQvdHlwZXMnXG5cbmltcG9ydCB7IHdpdGhNZXJnZWRQcm9wcywgd2l0aE51bGxhYmxlSlNPTlNjaGVtYVR5cGUgfSBmcm9tICdwYXlsb2FkL3V0aWxpdGllcydcblxuaW1wb3J0IHR5cGUgeyBBZGFwdGVyQXJndW1lbnRzIH0gZnJvbSAnLi90eXBlcydcblxuaW1wb3J0IFJpY2hUZXh0Q2VsbCBmcm9tICcuL2NlbGwnXG5pbXBvcnQgeyByaWNoVGV4dFJlbGF0aW9uc2hpcFByb21pc2UgfSBmcm9tICcuL2RhdGEvcmljaFRleHRSZWxhdGlvbnNoaXBQcm9taXNlJ1xuaW1wb3J0IHsgcmljaFRleHRWYWxpZGF0ZSB9IGZyb20gJy4vZGF0YS92YWxpZGF0aW9uJ1xuaW1wb3J0IFJpY2hUZXh0RmllbGQgZnJvbSAnLi9maWVsZCdcblxuZXhwb3J0IGZ1bmN0aW9uIHNsYXRlRWRpdG9yKGFyZ3M6IEFkYXB0ZXJBcmd1bWVudHMpOiBSaWNoVGV4dEFkYXB0ZXI8YW55W10sIEFkYXB0ZXJBcmd1bWVudHMsIGFueT4ge1xuICByZXR1cm4ge1xuICAgIENlbGxDb21wb25lbnQ6IHdpdGhNZXJnZWRQcm9wcyh7XG4gICAgICBDb21wb25lbnQ6IFJpY2hUZXh0Q2VsbCxcbiAgICAgIHRvTWVyZ2VJbnRvUHJvcHM6IGFyZ3MsXG4gICAgfSksXG4gICAgRmllbGRDb21wb25lbnQ6IHdpdGhNZXJnZWRQcm9wcyh7XG4gICAgICBDb21wb25lbnQ6IFJpY2hUZXh0RmllbGQsXG4gICAgICB0b01lcmdlSW50b1Byb3BzOiBhcmdzLFxuICAgIH0pLFxuICAgIG91dHB1dFNjaGVtYTogKHsgaXNSZXF1aXJlZCB9KSA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBpdGVtczoge1xuICAgICAgICAgIHR5cGU6ICdvYmplY3QnLFxuICAgICAgICB9LFxuICAgICAgICB0eXBlOiB3aXRoTnVsbGFibGVKU09OU2NoZW1hVHlwZSgnYXJyYXknLCBpc1JlcXVpcmVkKSxcbiAgICAgIH1cbiAgICB9LFxuICAgIHBvcHVsYXRpb25Qcm9taXNlKHtcbiAgICAgIGNvbnRleHQsXG4gICAgICBjdXJyZW50RGVwdGgsXG4gICAgICBkZXB0aCxcbiAgICAgIGZpZWxkLFxuICAgICAgZmluZE1hbnksXG4gICAgICBmbGF0dGVuTG9jYWxlcyxcbiAgICAgIG92ZXJyaWRlQWNjZXNzLFxuICAgICAgcG9wdWxhdGlvblByb21pc2VzLFxuICAgICAgcmVxLFxuICAgICAgc2hvd0hpZGRlbkZpZWxkcyxcbiAgICAgIHNpYmxpbmdEb2MsXG4gICAgfSkge1xuICAgICAgaWYgKFxuICAgICAgICBmaWVsZC5hZG1pbj8uZWxlbWVudHM/LmluY2x1ZGVzKCdyZWxhdGlvbnNoaXAnKSB8fFxuICAgICAgICBmaWVsZC5hZG1pbj8uZWxlbWVudHM/LmluY2x1ZGVzKCd1cGxvYWQnKSB8fFxuICAgICAgICBmaWVsZC5hZG1pbj8uZWxlbWVudHM/LmluY2x1ZGVzKCdsaW5rJykgfHxcbiAgICAgICAgIWZpZWxkPy5hZG1pbj8uZWxlbWVudHNcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gcmljaFRleHRSZWxhdGlvbnNoaXBQcm9taXNlKHtcbiAgICAgICAgICBjb250ZXh0LFxuICAgICAgICAgIGN1cnJlbnREZXB0aCxcbiAgICAgICAgICBkZXB0aCxcbiAgICAgICAgICBmaWVsZCxcbiAgICAgICAgICBmaW5kTWFueSxcbiAgICAgICAgICBmbGF0dGVuTG9jYWxlcyxcbiAgICAgICAgICBvdmVycmlkZUFjY2VzcyxcbiAgICAgICAgICBwb3B1bGF0aW9uUHJvbWlzZXMsXG4gICAgICAgICAgcmVxLFxuICAgICAgICAgIHNob3dIaWRkZW5GaWVsZHMsXG4gICAgICAgICAgc2libGluZ0RvYyxcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsXG4gICAgfSxcbiAgICB2YWxpZGF0ZTogcmljaFRleHRWYWxpZGF0ZSxcbiAgfVxufVxuXG5leHBvcnQgeyBkZWZhdWx0IGFzIEVsZW1lbnRCdXR0b24gfSBmcm9tICcuL2ZpZWxkL2VsZW1lbnRzL0J1dHRvbidcblxuZXhwb3J0IHsgZGVmYXVsdCBhcyB0b2dnbGVFbGVtZW50IH0gZnJvbSAnLi9maWVsZC9lbGVtZW50cy90b2dnbGUnXG5leHBvcnQgeyBkZWZhdWx0IGFzIExlYWZCdXR0b24gfSBmcm9tICcuL2ZpZWxkL2xlYXZlcy9CdXR0b24nXG5leHBvcnQgdHlwZSB7XG4gIEFkYXB0ZXJBcmd1bWVudHMsXG4gIEVsZW1lbnROb2RlLFxuICBGaWVsZFByb3BzLFxuICBSaWNoVGV4dEN1c3RvbUVsZW1lbnQsXG4gIFJpY2hUZXh0Q3VzdG9tTGVhZixcbiAgUmljaFRleHRFbGVtZW50LFxuICBSaWNoVGV4dExlYWYsXG4gIFRleHROb2RlLFxufSBmcm9tICcuL3R5cGVzJ1xuXG5leHBvcnQgeyBub2RlSXNUZXh0Tm9kZSB9IGZyb20gJy4vdHlwZXMnXG4iXSwibmFtZXMiOlsiRWxlbWVudEJ1dHRvbiIsIkxlYWZCdXR0b24iLCJub2RlSXNUZXh0Tm9kZSIsInNsYXRlRWRpdG9yIiwidG9nZ2xlRWxlbWVudCIsImFyZ3MiLCJDZWxsQ29tcG9uZW50Iiwid2l0aE1lcmdlZFByb3BzIiwiQ29tcG9uZW50IiwiUmljaFRleHRDZWxsIiwidG9NZXJnZUludG9Qcm9wcyIsIkZpZWxkQ29tcG9uZW50IiwiUmljaFRleHRGaWVsZCIsIm91dHB1dFNjaGVtYSIsImlzUmVxdWlyZWQiLCJpdGVtcyIsInR5cGUiLCJ3aXRoTnVsbGFibGVKU09OU2NoZW1hVHlwZSIsInBvcHVsYXRpb25Qcm9taXNlIiwiY29udGV4dCIsImN1cnJlbnREZXB0aCIsImRlcHRoIiwiZmllbGQiLCJmaW5kTWFueSIsImZsYXR0ZW5Mb2NhbGVzIiwib3ZlcnJpZGVBY2Nlc3MiLCJwb3B1bGF0aW9uUHJvbWlzZXMiLCJyZXEiLCJzaG93SGlkZGVuRmllbGRzIiwic2libGluZ0RvYyIsImFkbWluIiwiZWxlbWVudHMiLCJpbmNsdWRlcyIsInJpY2hUZXh0UmVsYXRpb25zaGlwUHJvbWlzZSIsInZhbGlkYXRlIiwicmljaFRleHRWYWxpZGF0ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7SUFvRW9CQSxhQUFhO2VBQWJBLGVBQWE7O0lBR2JDLFVBQVU7ZUFBVkEsZ0JBQVU7O0lBWXJCQyxjQUFjO2VBQWRBLHFCQUFjOztJQXhFUEMsV0FBVztlQUFYQTs7SUEyRElDLGFBQWE7ZUFBYkEsZUFBYTs7OzJCQXBFMkI7NkRBSW5DOzZDQUNtQjs0QkFDWDs4REFDUDsrREEyRGU7K0RBRUE7Z0VBQ0g7dUJBWVA7Ozs7OztBQXhFeEIsU0FBU0QsWUFBWUUsSUFBc0I7SUFDaEQsT0FBTztRQUNMQyxlQUFlQyxJQUFBQSwwQkFBZSxFQUFDO1lBQzdCQyxXQUFXQyxhQUFZO1lBQ3ZCQyxrQkFBa0JMO1FBQ3BCO1FBQ0FNLGdCQUFnQkosSUFBQUEsMEJBQWUsRUFBQztZQUM5QkMsV0FBV0ksY0FBYTtZQUN4QkYsa0JBQWtCTDtRQUNwQjtRQUNBUSxjQUFjLENBQUMsRUFBRUMsVUFBVSxFQUFFO1lBQzNCLE9BQU87Z0JBQ0xDLE9BQU87b0JBQ0xDLE1BQU07Z0JBQ1I7Z0JBQ0FBLE1BQU1DLElBQUFBLHFDQUEwQixFQUFDLFNBQVNIO1lBQzVDO1FBQ0Y7UUFDQUksbUJBQWtCLEVBQ2hCQyxPQUFPLEVBQ1BDLFlBQVksRUFDWkMsS0FBSyxFQUNMQyxLQUFLLEVBQ0xDLFFBQVEsRUFDUkMsY0FBYyxFQUNkQyxjQUFjLEVBQ2RDLGtCQUFrQixFQUNsQkMsR0FBRyxFQUNIQyxnQkFBZ0IsRUFDaEJDLFVBQVUsRUFDWDtZQUNDLElBQ0VQLE1BQU1RLEtBQUssRUFBRUMsVUFBVUMsU0FBUyxtQkFDaENWLE1BQU1RLEtBQUssRUFBRUMsVUFBVUMsU0FBUyxhQUNoQ1YsTUFBTVEsS0FBSyxFQUFFQyxVQUFVQyxTQUFTLFdBQ2hDLENBQUNWLE9BQU9RLE9BQU9DLFVBQ2Y7Z0JBQ0EsT0FBT0UsSUFBQUEsd0RBQTJCLEVBQUM7b0JBQ2pDZDtvQkFDQUM7b0JBQ0FDO29CQUNBQztvQkFDQUM7b0JBQ0FDO29CQUNBQztvQkFDQUM7b0JBQ0FDO29CQUNBQztvQkFDQUM7Z0JBQ0Y7WUFDRjtZQUNBLE9BQU87UUFDVDtRQUNBSyxVQUFVQyw0QkFBZ0I7SUFDNUI7QUFDRiJ9